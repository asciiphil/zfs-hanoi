#!/usr/bin/env python

import math
import optparse
import re
import subprocess
import sys
import time

parser = optparse.OptionParser()
parser.add_option('-p', '--prefix', default='hanoi', help='The prefix to use on snapshots generated by this program.')
parser.add_option('-z', '--zfs', default='zfs', help='Path to the zfs executable, if not in $PATH.')
parser.add_option('-r', '--recursive', action='store_true', help='Apply snapshots recursively to dataset\'s children.')
parser.add_option('-m', '--keep-min', type='int', default=1, help='The minimum number of consecutive recent snapshots to keep.')
parser.add_option('-v', '--verbose', action='store_true', help='Be verbose about what we\'re doing.')
(options, args) = parser.parse_args()

class SnapshotList:
    def __init__(self):
        self.snapshots = []

    def add(self, snapshot_name):
        m = re.search('^(?:[^@]+@)?%s_[^_]+_([0-9a-f]+)$' % re.escape(options.prefix), snapshot_name)
        if m:
            self.snapshots.append((int(m.group(1), 16), snapshot_name))
        elif options.verbose:
            print 'Skipping snapshot:', snapshot_name

    @property
    def max_counter(self):
        if len(self.snapshots) == 0:
            return 0
        else:
            return max([counter for counter, name in self.snapshots])

    def next_snapshot(self):
        return '%s_%s_%05x' % (options.prefix, time.strftime('%Y-%m-%dT%H:%M%z'), self.max_counter + 1)

    def obsolete_snapshots(self):
        if self.max_counter <= 0:
            return
        max_power_of_two = int(math.log(self.max_counter, 2))
        ordered_snapshots = list(reversed(sorted(self.snapshots)))
        valid_indices = set([i for i, name in ordered_snapshots[:options.keep_min]])
        for p in xrange(0, max_power_of_two + 1):
            for i, name in ordered_snapshots:
                if i % 2**p == 0 and i / 2**p % 2 == 1:
                    valid_indices.add(i)
                    break
        if options.verbose:
            print 'valid indices are:', ' '.join([str(i) for i in sorted(valid_indices)])
        for i, name in self.snapshots:
            if i not in valid_indices:
                yield name

for dataset in args:
    snapshots = SnapshotList()
    cmd = [options.zfs, 'list', '-Hp', '-t', 'snapshot', '-d', '1', '-o', 'name', dataset]
    if options.verbose:
        print 'running:', ' '.join(cmd)
    zfs_list = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    lines, ignored = zfs_list.communicate()
    for line in lines.split('\n'):
        snapshots.add(line)

    cmd = [options.zfs, 'snapshot']
    if options.recursive:
        cmd.append('-r')
    cmd += ['%s@%s' % (dataset, snapshots.next_snapshot())]
    if options.verbose:
        print 'running:', ' '.join(cmd)
    subprocess.call(cmd)
    snapshots.add(snapshots.next_snapshot())

    for obsolete in snapshots.obsolete_snapshots():
        cmd = [options.zfs, 'destroy']
        if options.recursive:
            cmd.append('-r')
        cmd += [obsolete]
        if options.verbose:
            print 'running:', ' '.join(cmd)
        subprocess.call(cmd)
    
